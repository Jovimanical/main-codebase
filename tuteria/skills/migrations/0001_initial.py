# -*- coding: utf-8 -*-
# Generated by Django 1.9.6 on 2016-08-12 07:05
from __future__ import unicode_literals

import cloudinary.models
from django.conf import settings
import django.contrib.postgres.fields
import django.contrib.postgres.fields.jsonb
import django.core.validators
from django.db import migrations, models
import django.db.models.deletion
import django_extensions.db.fields
import skills.mixins
import taggit.managers


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ("taggit", "0002_auto_20150616_2121"),
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
        ("quiz", "__first__"),
    ]

    operations = [
        migrations.CreateModel(
            name="Category",
            fields=[
                (
                    "id",
                    models.AutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "slug",
                    django_extensions.db.fields.AutoSlugField(
                        blank=True, editable=False, populate_from=b"name"
                    ),
                ),
                ("name", models.CharField(max_length=70)),
                ("priority", models.IntegerField(default=11)),
                ("caption", models.CharField(blank=True, max_length=70, null=True)),
                ("featured", models.BooleanField(default=False)),
                ("image", models.CharField(blank=True, max_length=70, null=True)),
            ],
            options={"ordering": ("priority",)},
        ),
        migrations.CreateModel(
            name="QuizSitting",
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created', django_extensions.db.fields.CreationDateTimeField(auto_now_add=True, verbose_name='created')),
                ('modified', django_extensions.db.fields.ModificationDateTimeField(auto_now=True, verbose_name='modified')),
                ('started', models.BooleanField(default=False)),
                ('score', models.IntegerField(default=0)),
                ('completed', models.BooleanField(default=False)),
                ('tutor_email',models.CharField(blank=True, max_length=254, null=True)),
            ],
            options={
                "ordering": ("-modified", "-created"),
                "abstract": False,
                "get_latest_by": "modified",
            },
        ),
        migrations.CreateModel(
            name="Skill",
            fields=[
                (
                    "id",
                    models.AutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "slug",
                    django_extensions.db.fields.AutoSlugField(
                        blank=True, editable=False, populate_from=b"name"
                    ),
                ),
                ("name", models.CharField(max_length=70)),
                ("featured", models.BooleanField(default=False)),
                ("duration", models.IntegerField(default=6)),
                ("background_image", models.CharField(blank=True, max_length=100)),
                ("heading", models.CharField(blank=True, default=b"", max_length=150)),
                ("caption", models.CharField(blank=True, default=b"", max_length=200)),
                (
                    "subheading",
                    models.CharField(blank=True, default=b"", max_length=150),
                ),
                ("description", models.TextField(blank=True, max_length=400)),
                (
                    "testimonial",
                    models.TextField(blank=True, default=b"", max_length=400),
                ),
                (
                    "short_name",
                    models.CharField(blank=True, default=b"", max_length=10),
                ),
                (
                    "related_with",
                    django.contrib.postgres.fields.ArrayField(
                        base_field=models.CharField(max_length=70),
                        blank=True,
                        null=True,
                        size=None,
                    ),
                ),
                (
                    "market_category",
                    models.IntegerField(
                        blank=True,
                        choices=[
                            (1, b"School"),
                            (2, b"Exams"),
                            (3, b"Languages"),
                            (4, b"Skills"),
                        ],
                        null=True,
                    ),
                ),
                ("categories", models.ManyToManyField(to="skills.Category")),
                (
                    "quiz",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        to="quiz.Quiz",
                    ),
                ),
            ],
        ),
        migrations.CreateModel(
            name="SkillCertificate",
            fields=[
                (
                    "id",
                    models.AutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("award_name", models.CharField(blank=True, max_length=70, null=True)),
                (
                    "award_institution",
                    models.CharField(blank=True, max_length=100, null=True),
                ),
            ],
        ),
        migrations.CreateModel(
            name="SubCategory",
            fields=[
                (
                    "id",
                    models.AutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("name", models.CharField(max_length=70)),
                (
                    "section",
                    models.CharField(
                        blank=True,
                        choices=[
                            (b"Academic Subjects", b"Academic Subjects"),
                            (b"Exams & Languages", b"Exams & Languages"),
                            (b"Non Academic Subjects", b"Non Academic Subjects"),
                        ],
                        max_length=70,
                        null=True,
                    ),
                ),
                (
                    "questions",
                    django.contrib.postgres.fields.jsonb.JSONField(
                        blank=True, default=[]
                    ),
                ),
            ],
        ),
        migrations.CreateModel(
            name="SubjectExhibition",
            fields=[
                (
                    "id",
                    models.AutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "image",
                    cloudinary.models.CloudinaryField(
                        blank=True, max_length=100, null=True
                    ),
                ),
            ],
        ),
        migrations.CreateModel(
            name="TutorSkill",
            fields=[
                (
                    "id",
                    models.AutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "created",
                    django_extensions.db.fields.CreationDateTimeField(
                        auto_now_add=True, verbose_name="created"
                    ),
                ),
                (
                    "modified",
                    django_extensions.db.fields.ModificationDateTimeField(
                        auto_now=True, verbose_name="modified"
                    ),
                ),
                (
                    "heading",
                    models.CharField(
                        db_index=True,
                        max_length=70,
                        null=True,
                        validators=[django.core.validators.MaxLengthValidator(70)],
                    ),
                ),
                (
                    "slug",
                    django_extensions.db.fields.AutoSlugField(
                        blank=True,
                        editable=False,
                        max_length=70,
                        populate_from=b"heading",
                    ),
                ),
                (
                    "description",
                    models.TextField(
                        validators=[
                            django.core.validators.MinLengthValidator(300),
                            django.core.validators.MaxLengthValidator(1200),
                        ]
                    ),
                ),
                (
                    "price",
                    models.DecimalField(decimal_places=2, default=500.0, max_digits=10),
                ),
                (
                    "discount",
                    models.IntegerField(
                        choices=[
                            (0, b"0%"),
                            (10, b"10%"),
                            (15, b"15%"),
                            (20, b"20%"),
                            (25, b"25%"),
                            (30, b"30%"),
                            (35, b"35%"),
                            (40, b"40%"),
                            (45, b"45%"),
                            (50, b"50%"),
                        ],
                        default=0,
                        validators=[
                            django.core.validators.MaxValueValidator(50),
                            django.core.validators.MinValueValidator(0),
                        ],
                    ),
                ),
                (
                    "max_student",
                    models.IntegerField(
                        choices=[
                            (1, b"1 student "),
                            (2, b"2 students "),
                            (3, b"3 students "),
                            (4, b"4 students "),
                            (5, b"5 students "),
                        ],
                        default=1,
                    ),
                ),
                ("monthly_booking", models.BooleanField(default=True)),
                (
                    "hours_per_day",
                    models.IntegerField(
                        blank=True,
                        choices=[
                            (1, b"1hr per day"),
                            (2, b"2hrs per day"),
                            (3, b"3hrs per day"),
                            (4, b"4hrs per day"),
                            (5, b"5hrs per day"),
                        ],
                        default=1,
                        null=True,
                    ),
                ),
                (
                    "days_per_week",
                    models.IntegerField(
                        blank=True,
                        choices=[
                            (1, b"1day per week"),
                            (2, b"2days per week"),
                            (3, b"3days per week"),
                            (4, b"4days per week"),
                            (5, b"5days per week"),
                            (6, b"6days per week"),
                            (7, b"7days per week"),
                        ],
                        default=1,
                        null=True,
                    ),
                ),
                ("marked_for_display", models.BooleanField(default=False)),
                (
                    "image",
                    cloudinary.models.CloudinaryField(
                        blank=True, max_length=100, null=True
                    ),
                ),
                (
                    "status",
                    models.IntegerField(
                        choices=[
                            (2, b"Active"),
                            (3, b"Suspended"),
                            (1, b"Pending Approval"),
                            (4, b"Denied"),
                            (5, b"Require Modification"),
                        ],
                        default=5,
                    ),
                ),
                ("set_for_request", models.BooleanField(default=False)),
                ("approved", models.NullBooleanField()),
                (
                    "skill",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE, to="skills.Skill"
                    ),
                ),
                (
                    "tags",
                    taggit.managers.TaggableManager(
                        help_text="A comma-separated list of tags.",
                        through="taggit.TaggedItem",
                        to="taggit.Tag",
                        verbose_name="Tags",
                    ),
                ),
                (
                    "tutor",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
            ],
            bases=(skills.mixins.TutorSkillMixin, models.Model),
        ),
        migrations.AddField(
            model_name="subjectexhibition",
            name="ts",
            field=models.ForeignKey(
                on_delete=django.db.models.deletion.CASCADE,
                related_name="exhibitions",
                to="skills.TutorSkill",
            ),
        ),
        migrations.AddField(
            model_name="skillcertificate",
            name="ts",
            field=models.ForeignKey(
                on_delete=django.db.models.deletion.CASCADE, to="skills.TutorSkill"
            ),
        ),
        migrations.AddField(
            model_name="skill",
            name="subcategories",
            field=models.ManyToManyField(blank=True, to="skills.SubCategory"),
        ),
        migrations.AddField(
            model_name="skill",
            name="tags",
            field=taggit.managers.TaggableManager(
                blank=True,
                help_text="A comma-separated list of tags.",
                through="taggit.TaggedItem",
                to="taggit.Tag",
                verbose_name="Tags",
            ),
        ),
        migrations.AddField(
            model_name="skill",
            name="testifier",
            field=models.ForeignKey(
                blank=True,
                null=True,
                on_delete=django.db.models.deletion.CASCADE,
                to=settings.AUTH_USER_MODEL,
            ),
        ),
        migrations.AddField(
            model_name="quizsitting",
            name="tutor_skill",
            field=models.ForeignKey(
                on_delete=django.db.models.deletion.CASCADE,
                related_name="sitting",
                to="skills.TutorSkill",
            ),
        ),
        migrations.CreateModel(
            name="ApprovedActiveTutor",
            fields=[],
            options={"proxy": True},
            bases=("skills.tutorskill",),
        ),
        migrations.CreateModel(
            name="ApprovedTutorSkill",
            fields=[],
            options={"proxy": True},
            bases=("skills.tutorskill",),
        ),
        migrations.CreateModel(
            name="PendingTutorSkill",
            fields=[],
            options={"proxy": True},
            bases=("skills.tutorskill",),
        ),
        migrations.CreateModel(
            name="TutorSkillForClient",
            fields=[],
            options={"proxy": True},
            bases=("skills.tutorskill",),
        ),
        migrations.AlterUniqueTogether(
            name="tutorskill", unique_together=set([("tutor", "skill")])
        ),
    ]
