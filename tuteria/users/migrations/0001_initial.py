# -*- coding: utf-8 -*-
# Generated by Django 1.9.6 on 2016-08-12 07:05
from __future__ import unicode_literals

import autoslug.fields
import cloudinary.models
from django.conf import settings
import django.contrib.postgres.fields
import django.contrib.postgres.fields.jsonb
from django.db import migrations, models
import django.db.models.deletion
import django.utils.timezone
import django_countries.fields
import django_extensions.db.fields
import embed_video.fields
import markupfield.fields
import phonenumber_field.modelfields
import registration.interview
import users.mixins


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ("rewards", "__first__"),
        ("auth", "0007_alter_validators_add_error_messages"),
    ]

    operations = [
        migrations.CreateModel(
            name="User",
            fields=[
                (
                    "id",
                    models.AutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("password", models.CharField(max_length=128, verbose_name="password")),
                (
                    "last_login",
                    models.DateTimeField(
                        blank=True, null=True, verbose_name="last login"
                    ),
                ),
                (
                    "is_superuser",
                    models.BooleanField(
                        default=False,
                        help_text="Designates that this user has all permissions without explicitly assigning them.",
                        verbose_name="superuser status",
                    ),
                ),
                (
                    "email",
                    models.EmailField(
                        db_index=True,
                        max_length=254,
                        unique=True,
                        verbose_name="email address",
                    ),
                ),
                (
                    "first_name",
                    models.CharField(
                        blank=True,
                        db_index=True,
                        max_length=40,
                        null=True,
                        verbose_name="first name",
                    ),
                ),
                (
                    "last_name",
                    models.CharField(
                        blank=True,
                        db_index=True,
                        max_length=40,
                        null=True,
                        verbose_name="last name",
                    ),
                ),
                (
                    "username",
                    models.CharField(
                        blank=True,
                        max_length=14,
                        null=True,
                        verbose_name="display name",
                    ),
                ),
                (
                    "is_staff",
                    models.BooleanField(
                        default=False,
                        help_text=b"Designates whether the user can log into this admin site.",
                        verbose_name="staff status",
                    ),
                ),
                (
                    "is_active",
                    models.BooleanField(
                        default=True,
                        help_text="Designates whether this user should be treated as active. Unselect this instead of deleting accounts.",
                        verbose_name="active",
                    ),
                ),
                (
                    "date_joined",
                    models.DateTimeField(
                        default=django.utils.timezone.now, verbose_name="date joined"
                    ),
                ),
                (
                    "country",
                    django_countries.fields.CountryField(max_length=2, null=True),
                ),
                (
                    "slug",
                    autoslug.fields.AutoSlugField(
                        editable=True, populate_from=b"sluger", sep=b"", unique=True
                    ),
                ),
                ("confirmed_date", models.DateTimeField(blank=True, null=True)),
                ("tuteria_points", models.IntegerField(default=0)),
                (
                    "tutor_intent",
                    models.BooleanField(default=False, verbose_name="intent to tutor"),
                ),
                (
                    "background_check_consent",
                    models.BooleanField(default=False, verbose_name="consent"),
                ),
                ("last_visit", models.DateTimeField(blank=True, null=True)),
                ("submitted_verification", models.BooleanField(default=False)),
                ("flagged", models.BooleanField(default=False)),
                ("is_teacher", models.NullBooleanField()),
                ("is_referrer", models.BooleanField(default=False)),
                ("recieve_email", models.NullBooleanField()),
                ("pay_with_bank", models.NullBooleanField(default=True)),
                ("drip_counter", models.IntegerField(default=0)),
                ("drip_date", models.DateTimeField(blank=True, null=True)),
                ("no_of_subjects_found", models.IntegerField(default=1)),
                (
                    "paystack_customer_code",
                    models.CharField(blank=True, max_length=50, null=True),
                ),
            ],
            options={
                "abstract": False,
                "db_table": "auth_user",
                "verbose_name": "user",
                "swappable": "AUTH_USER_MODEL",
                "verbose_name_plural": "users",
            },
            bases=(users.mixins.TuteriaUserMixin, models.Model),
        ),
        migrations.CreateModel(
            name="Location",
            fields=[
                (
                    "id",
                    models.AutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("address", models.CharField(max_length=120)),
                (
                    "state",
                    models.CharField(
                        blank=True,
                        choices=[
                            (b"", b"Select State"),
                            (b"Abia", b"Abia"),
                            (b"Abuja", b"Abuja"),
                            (b"Adamawa", b"Adamawa"),
                            (b"Akwa Ibom", b"Akwa Ibom"),
                            (b"Anambra", b"Anambra"),
                            (b"Bayelsa", b"Bayelsa"),
                            (b"Bauchi", b"Bauchi"),
                            (b"Benue", b"Benue"),
                            (b"Borno", b"Borno"),
                            (b"Cross River", b"Cross River"),
                            (b"Delta", b"Delta"),
                            (b"Edo", b"Edo"),
                            (b"Ebonyi", b"Ebonyi"),
                            (b"Ekiti", b"Ekiti"),
                            (b"Enugu", b"Enugu"),
                            (b"Gombe", b"Gombe"),
                            (b"Imo", b"Imo"),
                            (b"Jigawa", b"Jigawa"),
                            (b"Kaduna", b"Kaduna"),
                            (b"Kano", b"Kano"),
                            (b"Katsina", b"Katsina"),
                            (b"Kebbi", b"Kebbi"),
                            (b"Kogi", b"Kogi"),
                            (b"Kwara", b"Kwara"),
                            (b"Lagos", b"Lagos"),
                            (b"Nassawara", b"Nassawara"),
                            (b"Niger", b"Niger"),
                            (b"Ogun", b"Ogun"),
                            (b"Ondo", b"Ondo"),
                            (b"Osun", b"Osun"),
                            (b"Oyo", b"Oyo"),
                            (b"Plateau", b"Plateau"),
                            (b"Rivers", b"Rivers"),
                            (b"Sokoto", b"Sokoto"),
                            (b"Taraba", b"Taraba"),
                            (b"Yobe", b"Yobe"),
                            (b"Zamfara", b"Zamfara"),
                        ],
                        db_index=True,
                        max_length=50,
                        null=True,
                    ),
                ),
                (
                    "distances",
                    django.contrib.postgres.fields.jsonb.JSONField(
                        blank=True, null=True
                    ),
                ),
                ("vicinity", models.CharField(blank=True, max_length=80, null=True)),
                (
                    "vicinity_type",
                    models.CharField(blank=True, max_length=20, null=True),
                ),
                (
                    "addr_type",
                    models.IntegerField(
                        choices=[
                            (1, b"User Address"),
                            (2, b"Tutor Address"),
                            (3, b"Neutral Address"),
                        ],
                        db_index=True,
                        default=1,
                    ),
                ),
                (
                    "longitude",
                    models.DecimalField(
                        blank=True, decimal_places=7, max_digits=10, null=True
                    ),
                ),
                (
                    "latitude",
                    models.DecimalField(
                        blank=True, decimal_places=7, max_digits=10, null=True
                    ),
                ),
                ("lga", models.CharField(blank=True, max_length=30, null=True)),
            ],
            options={"verbose_name": "Location", "verbose_name_plural": "locations"},
            bases=(models.Model, users.mixins.LocationMixin),
        ),
        migrations.CreateModel(
            name="PhoneNumber",
            fields=[
                (
                    "id",
                    models.AutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "created",
                    django_extensions.db.fields.CreationDateTimeField(
                        auto_now_add=True, verbose_name="created"
                    ),
                ),
                (
                    "modified",
                    django_extensions.db.fields.ModificationDateTimeField(
                        auto_now=True, verbose_name="modified"
                    ),
                ),
                (
                    "number",
                    phonenumber_field.modelfields.PhoneNumberField(max_length=128),
                ),
                ("verified", models.BooleanField(default=False)),
                ("primary", models.BooleanField(default=False, verbose_name="primary")),
            ],
            options={
                "db_table": "users_phonenumbers",
                "verbose_name": "phone number",
                "verbose_name_plural": "phone numbers",
            },
        ),
        migrations.CreateModel(
            name="UserIdentification",
            fields=[
                (
                    "id",
                    models.AutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "created",
                    django_extensions.db.fields.CreationDateTimeField(
                        auto_now_add=True, verbose_name="created"
                    ),
                ),
                (
                    "modified",
                    django_extensions.db.fields.ModificationDateTimeField(
                        auto_now=True, verbose_name="modified"
                    ),
                ),
                (
                    "identity",
                    cloudinary.models.CloudinaryField(
                        max_length=100,
                        null=True,
                        verbose_name="Identification Document",
                    ),
                ),
                ("verified", models.BooleanField(default=False)),
                (
                    "doc_type",
                    models.CharField(
                        choices=[(b"identity", b"identity")],
                        default=b"identity",
                        max_length=30,
                    ),
                ),
                ("require_modification", models.BooleanField(default=False)),
            ],
            options={"db_table": "users_identification"},
        ),
        migrations.CreateModel(
            name="UserMilestone",
            fields=[
                (
                    "id",
                    models.AutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "milestone",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        to="rewards.Milestone",
                    ),
                ),
            ],
        ),
        migrations.CreateModel(
            name="UserProfile",
            fields=[
                (
                    "created",
                    django_extensions.db.fields.CreationDateTimeField(
                        auto_now_add=True, verbose_name="created"
                    ),
                ),
                (
                    "modified",
                    django_extensions.db.fields.ModificationDateTimeField(
                        auto_now=True, verbose_name="modified"
                    ),
                ),
                (
                    "user",
                    models.OneToOneField(
                        on_delete=django.db.models.deletion.CASCADE,
                        primary_key=True,
                        related_name="profile",
                        serialize=False,
                        to=settings.AUTH_USER_MODEL,
                        verbose_name=b"user",
                    ),
                ),
                (
                    "application_status",
                    models.IntegerField(
                        choices=[
                            (0, b"NOT APPLIED"),
                            (1, b"BEGAN APPLICATION"),
                            (2, b"APPLICATION COMPLETED PENDING REVIEW"),
                            (3, b"VERIFIED"),
                            (4, b"DENIED"),
                            (6, b"MARKED AS DENIED"),
                            (5, b"MARKED AS VERIFIED"),
                        ],
                        db_index=True,
                        default=0,
                    ),
                ),
                ("application_trial", models.IntegerField(default=0)),
                (
                    "registration_level",
                    models.IntegerField(
                        choices=[
                            (0, b"Not Began"),
                            (1, b"Credentials"),
                            (2, b"Preference"),
                            (3, b"Interview"),
                            (4, b"Interview22"),
                        ],
                        db_index=True,
                        default=0,
                    ),
                ),
                (
                    "date_denied",
                    models.DateTimeField(blank=True, db_index=True, null=True),
                ),
                (
                    "description",
                    markupfield.fields.MarkupField(
                        blank=True,
                        default=b"",
                        max_length=400,
                        rendered_field=True,
                        verbose_name="About Me",
                    ),
                ),
                (
                    "description_markup_type",
                    models.CharField(
                        choices=[
                            (b"", b"--"),
                            (b"html", "HTML"),
                            (b"plain", "Plain"),
                            (b"markdown", "Markdown"),
                            (b"restructuredtext", "Restructured Text"),
                        ],
                        default=b"markdown",
                        max_length=30,
                    ),
                ),
                (
                    "gender",
                    models.CharField(
                        choices=[(b"M", b"Male"), (b"F", b"Female")],
                        db_index=True,
                        max_length=15,
                    ),
                ),
                ("_description_rendered", models.TextField(editable=False)),
                (
                    "dob",
                    models.DateField(
                        blank=True, db_index=True, null=True, verbose_name=b"dob"
                    ),
                ),
                (
                    "image",
                    cloudinary.models.CloudinaryField(
                        blank=True,
                        default=b"",
                        max_length=100,
                        null=True,
                        verbose_name=b"image",
                    ),
                ),
                ("video", embed_video.fields.EmbedVideoField(blank=True, null=True)),
                ("video_approved", models.BooleanField(default=False)),
                ("image_approved", models.BooleanField(default=True)),
                (
                    "custom_header",
                    models.CharField(blank=True, default=b"", max_length=70),
                ),
                (
                    "tutor_type",
                    models.CharField(blank=True, default=b"", max_length=40),
                ),
                (
                    "date_approved",
                    models.DateTimeField(blank=True, db_index=True, null=True),
                ),
                (
                    "hours",
                    models.IntegerField(
                        default=0, null=True, verbose_name=b"max_no_of_hours"
                    ),
                ),
                (
                    "days",
                    models.IntegerField(
                        default=0, null=True, verbose_name=b"max_no_of_days"
                    ),
                ),
                ("allow_monthly", models.BooleanField(default=True)),
                (
                    "cancellation",
                    models.CharField(
                        choices=[
                            (b"Flexible", b"Flexible"),
                            (b"Moderate", b"Moderate"),
                            (b"Strict", b"Strict"),
                        ],
                        default=b"Flexible",
                        max_length=15,
                    ),
                ),
                (
                    "tutoring_address",
                    models.CharField(
                        choices=[
                            (b"user", b"Client's Location"),
                            (b"tutor", b"Tutor's Location"),
                            (b"neutral", b"Anywhere convenient"),
                        ],
                        default=b"user",
                        max_length=10,
                    ),
                ),
                (
                    "tutoring_distance",
                    models.CharField(
                        choices=[
                            (b"near", b"at most 5km (~ 30mins drive )"),
                            (b"not far", b"at most 10km (~ 1hrs drive )"),
                            (b"quite far", b"at most 15km (~ 1.5hrs drive )"),
                            (b"far", b"at most 20km (~ 2hrs drive )"),
                            (b"very far", b"greater than 20km (the whole state)"),
                        ],
                        default=b"near",
                        max_length=10,
                    ),
                ),
                (
                    "response_time",
                    models.IntegerField(
                        blank=True,
                        choices=[
                            (b"", b"Select"),
                            (30, b"in 30 minutes"),
                            (60, b"in 1 hour"),
                            (120, b"in 2 hours"),
                            (180, b"in 3 hours"),
                            (300, b"in 5 hours"),
                        ],
                        default=0,
                        verbose_name="Response Time",
                    ),
                ),
                (
                    "booking_prep",
                    models.IntegerField(
                        blank=True,
                        choices=[
                            (b"", b"Select option"),
                            (0, b"Always ready"),
                            (1, b"At least 1 day"),
                            (2, b"At least 2 days"),
                            (3, b"At least 3 days"),
                        ],
                        null=True,
                    ),
                ),
                ("good_fit", models.NullBooleanField()),
                ("terms_and_conditions", models.NullBooleanField()),
                ("address_reason", models.TextField(blank=True, null=True)),
                ("tutor_description", models.TextField(blank=True, null=True)),
                (
                    "interview_slot",
                    models.CharField(
                        blank=True,
                        choices=[
                            (b"", b"Best Time to Call"),
                            (b"morining", b"9am - 11am"),
                            (b"afternoon", b"1pm - 3pm"),
                            (b"evening", b"5pm - 7pm"),
                        ],
                        max_length=20,
                        null=True,
                    ),
                ),
                ("background_check", models.BooleanField(default=False)),
                (
                    "level",
                    models.IntegerField(
                        choices=[
                            (0, b"new tutor"),
                            (1, b"influencer"),
                            (2, b"role model"),
                            (3, b"super tutor"),
                            (4, b"leader"),
                        ],
                        db_index=True,
                        default=1,
                    ),
                ),
                (
                    "years_of_teaching",
                    models.IntegerField(
                        blank=True,
                        choices=[
                            (b"", b"Just starting out"),
                            (2, b"Less than 2 years"),
                            (5, b"Between 3 to 5 years"),
                            (10, b"Between 6 to 10 years"),
                            (50, b"More than 10 years"),
                        ],
                        null=True,
                    ),
                ),
                (
                    "classes",
                    django.contrib.postgres.fields.ArrayField(
                        base_field=models.CharField(max_length=20),
                        blank=True,
                        null=True,
                        size=None,
                    ),
                ),
                ("blacklist", models.BooleanField(default=False)),
                ("blog_description", models.TextField(blank=True, default=b"")),
                ("handle", models.CharField(blank=True, default=b"", max_length=20)),
                (
                    "curriculum_used",
                    django.contrib.postgres.fields.ArrayField(
                        base_field=models.CharField(
                            blank=True,
                            choices=[
                                (b"1", b"Nigerian"),
                                (b"2", b"British"),
                                (b"3", b"American"),
                            ],
                            max_length=30,
                        ),
                        blank=True,
                        null=True,
                        size=None,
                    ),
                ),
                (
                    "curriculum_explanation",
                    models.TextField(blank=True, max_length=300, null=True),
                ),
                ("request_pool", models.BooleanField(default=False)),
                (
                    "potential_subjects",
                    django.contrib.postgres.fields.ArrayField(
                        base_field=models.CharField(blank=True, max_length=50),
                        blank=True,
                        null=True,
                        size=None,
                    ),
                ),
                (
                    "levels_with_exams",
                    django.contrib.postgres.fields.ArrayField(
                        base_field=models.CharField(blank=True, max_length=50),
                        blank=True,
                        null=True,
                        size=None,
                    ),
                ),
                (
                    "answers",
                    django.contrib.postgres.fields.jsonb.JSONField(
                        blank=True, null=True
                    ),
                ),
            ],
            options={
                "ordering": ("-modified", "-created"),
                "abstract": False,
                "get_latest_by": "modified",
            },
            bases=(
                registration.interview.TutorInterview,
                users.mixins.TutorProfileMixin,
                models.Model,
            ),
        ),
        migrations.AddField(
            model_name="usermilestone",
            name="user",
            field=models.ForeignKey(
                on_delete=django.db.models.deletion.CASCADE,
                related_name="milestones",
                to=settings.AUTH_USER_MODEL,
            ),
        ),
        migrations.AddField(
            model_name="useridentification",
            name="user",
            field=models.ForeignKey(
                on_delete=django.db.models.deletion.CASCADE,
                related_name="identifications",
                to=settings.AUTH_USER_MODEL,
                verbose_name=b"user",
            ),
        ),
        migrations.AddField(
            model_name="phonenumber",
            name="owner",
            field=models.ForeignKey(
                on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL
            ),
        ),
        migrations.AddField(
            model_name="location",
            name="user",
            field=models.ForeignKey(
                on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL
            ),
        ),
        migrations.AddField(
            model_name="user",
            name="groups",
            field=models.ManyToManyField(
                blank=True,
                help_text="The groups this user belongs to. A user will get all permissions granted to each of their groups.",
                related_name="user_set",
                related_query_name="user",
                to="auth.Group",
                verbose_name="groups",
            ),
        ),
        migrations.AddField(
            model_name="user",
            name="user_permissions",
            field=models.ManyToManyField(
                blank=True,
                help_text="Specific permissions for this user.",
                related_name="user_set",
                related_query_name="user",
                to="auth.Permission",
                verbose_name="user permissions",
            ),
        ),
        migrations.CreateModel(
            name="Customers", fields=[], options={"proxy": True}, bases=("users.user",)
        ),
        migrations.CreateModel(
            name="ReferralMonitoring",
            fields=[],
            options={"proxy": True},
            bases=("users.user",),
        ),
        migrations.CreateModel(
            name="Tutor", fields=[], options={"proxy": True}, bases=("users.user",)
        ),
        migrations.CreateModel(
            name="TutorLocation",
            fields=[],
            options={"proxy": True},
            bases=("users.location",),
        ),
        migrations.CreateModel(
            name="VerifiedTutorIdentification",
            fields=[],
            options={"proxy": True},
            bases=("users.useridentification",),
        ),
        migrations.CreateModel(
            name="VerifiedTutorWithSkill",
            fields=[],
            options={"proxy": True},
            bases=("users.user",),
        ),
        migrations.AlterUniqueTogether(
            name="usermilestone", unique_together=set([("milestone", "user")])
        ),
        migrations.AlterUniqueTogether(
            name="phonenumber", unique_together=set([("owner", "number")])
        ),
        migrations.CreateModel(
            name="TutorApplicant",
            fields=[],
            options={"proxy": True},
            bases=("users.userprofile",),
        ),
        migrations.CreateModel(
            name="VerifiedTutor",
            fields=[],
            options={"proxy": True},
            bases=("users.userprofile",),
        ),
    ]
