user  nginx;
daemon off;
worker_processes  auto;

error_log  /proc/self/fd/2 warn;
pid        /var/run/nginx.pid;


events {
    worker_connections  1024;
}
http {
    resolver 8.8.8.8;
    include       /etc/nginx/mime.types;
    default_type  application/octet-stream;

    log_format  main  '$remote_addr - $remote_user [$time_local] "$request" '
                      '$status $body_bytes_sent "$http_referer" '
                      '"$http_user_agent" "$http_x_forwarded_for"';

    access_log  /var/log/nginx/access.log  main;

    sendfile        on;
    #tcp_nopush     on;

    keepalive_timeout  65;

    pagespeed on;

        # Needs to exist and be writable by nginx.  Use tmpfs for best performance.
    pagespeed ProcessScriptVariables on;
    pagespeed FileCachePath /var/cache/ngx_pagespeed_cache;
    pagespeed LoadFromFile  "https://$host/static/"
                            "/var/tuteria/";
    pagespeed EnableFilters rewrite_images,combine_css;
    pagespeed RewriteLevel PassThrough;
    pagespeed EnableFilters extend_cache;
    # pagespeed DisableFilters rewrite_javascript,rewrite_javascript_external,rewrite_javascript_inline, combine_javascript;

    #Compression
    # Enable Gzip compressed.
    gzip on;

    # Compression level (1-9).
    # 5 is a perfect compromise between size and cpu usage, offering about
    # 75% reduction for most ascii files (almost identical to level 9).
    gzip_comp_level    5;

    # Don't compress anything that's already small and unlikely to shrink much
    # if at all (the default is 20 bytes, which is bad as that usually leads to
    # larger files after gzipping).
    gzip_min_length    256;

    # Compress data even for clients that are connecting to us via proxies,
    # identified by the "Via" header (required for CloudFront).
    gzip_proxied       any;

    # Tell proxies to cache both the gzipped and regular version of a resource
    # whenever the client's Accept-Encoding capabilities header varies;
    # Avoids the issue where a non-gzip capable client (which is extremely rare
    # today) would display gibberish if their proxy gave them the gzipped version.
    gzip_vary          on;

    # Compress all output labeled with one of the following MIME-types.
    gzip_types
    application/atom+xml
    application/javascript
    application/json
    application/ld+json
    application/manifest+json
    application/rdf+xml
    application/rss+xml
    application/schema+json
    application/vnd.geo+json
    application/vnd.ms-fontobject
    application/x-font-ttf
    application/x-javascript
    application/x-web-app-manifest+json
    application/xhtml+xml
    application/xml
    font/eot
    font/opentype
    image/bmp
    image/svg+xml
    image/vnd.microsoft.icon
    image/x-icon
    text/cache-manifest
    text/css
    text/javascript
    text/plain
    text/vcard
    text/vnd.rim.location.xloc
    text/vtt
    text/x-component
    text/x-cross-domain-policy
    text/xml;
    # text/html is always compressed by HttpGzipModule

    # This should be turned on if you are going to have pre-compressed copies (.gz) of
    # static files available. If not it should be left off as it will cause extra I/O
    # for the check. It is best if you enable this in a location{} block for
    # a specific directory, or on an individual server{} level.
    # gzip_static on;

    limit_req_zone $binary_remote_addr zone=login:10m rate=1r/s;

    upstream app {
        server staging.tuteria.com:8000 weight=2;
        server backup.tuteria.com:8000 weight=3;
        server tutor-search.tuteria.com:8009 weight=5;
    }
    server {
        listen 80;
        server_name tuteria.com.ng;
        return 301 $scheme://www.tuteria.com$request_uri;
    }

    server {
        listen 80;
        server_name www.tuteria.com.ng;
        return  301 $scheme://www.tuteria.com$request_uri;
    }

    # server {
    #     listen 80;
    #     server_name tuteria.com;
    #     rewrite ^ https://www.tuteria.com$request_uri? permanent;
    # }
    server{
        listen 80;
        server_name tuteria.com;
        return 301 https://www.tuteria.com$request_uri;
    }
    server {
        listen 80 default_server;
        server_name www.tuteria.com;
          #          tuteria.com;
        return 301 https://www.tuteria.com$request_uri;
    }

    server {
        listen 443 ssl http2 default_server;
        charset     utf-8;
        client_max_body_size 4G;
        # server_name staging.tuteria.com;
        server_name www.tuteria.com;
                    #tuteria.com;
        keepalive_timeout 5;

        ssl on;
        ssl_certificate /etc/nginx/conf/ssl-unified.crt;
        ssl_certificate_key /etc/nginx/conf/ssl.key;
        access_log /proc/self/fd/1;
        error_log /proc/self/fd/2;
        ssl_protocols TLSv1 TLSv1.1 TLSv1.2;
        gzip on;
        gzip_disable "msie6";
        server_tokens off;
        if ($host = tuteria.com) {
            return 301 https://www.tuteria.com$request_uri;
        }

        # location ~* \.(?:css|js)$ {
        #   expires 1h;
        #   access_log off;
        #   add_header Cache-Control "public";
        #   try_files $uri =404;
        # }
        # location ~* \.(?:jpg|jpeg|gif|png|ico|cur|gz|svg|svgz|mp4|ogg|ogv|webm|htc)$ {
        #   expires 1M;
        #   access_log off;
        #   add_header Cache-Control "public";
        #   root /var/tuteria;
        # }


        location / {
            limit_req zone=login burst=20;
            proxy_set_header X-Forwarded-For $remote_addr;
            proxy_intercept_errors on;
            proxy_pass   http://app;
            # proxy_pass http://{{HOLLA}}:8000$request_uri;
            proxy_set_header Host $server_name;
            add_header Strict-Transport-Security "max-age=31536000; includeSubdomains;";
            proxy_set_header X-Forwarded-SSL on;
            proxy_set_header X-Forwarded-Proto https;
            add_header Access-Control-Allow-Origin "$http_origin";
        }


        # Ensure requests for pagespeed optimized resources go to the pagespeed handler
        # and no extraneous headers get set.
        location ~ "\.pagespeed\.([a-z]\.)?[a-z]{2}\.[^.]{10}\.[^.]+" {
          add_header "" "";
        }
        location ~ "^/pagespeed_static/" { }
        location ~ "^/ngx_pagespeed_beacon$" { }
        pagespeed XHeaderValue "Powered By ngx_pagespeed";

        location /ngx_pagespeed_statistics { allow 127.0.0.1; deny all; }
        location /ngx_pagespeed_global_statistics { allow 127.0.0.1; deny all; }
        location /ngx_pagespeed_message { allow 127.0.0.1; deny all; }
        location /pagespeed_console { allow 127.0.0.1; deny all; }
        location ~ ^/pagespeed_admin { allow 127.0.0.1; deny all; }
        location ~ ^/pagespeed_global_admin { allow 127.0.0.1; deny all; }

        location /static {
            alias /var/tuteria; # your Django project's static files - amend as required
        }

        location /media {
            alias /var/tuteria_media; # your Django project's static files - amend as required
        }




        error_page   500 502 503 504  /50x.html;
        location = /50x.html {
            root   /etc/nginx/html;
        }

    }
    # server {
	# 	listen 80;
	# 	server_name ___my.example.com___ www.___my.example.com___;

	# 	location /.well-known/acme-challenge {
	# 		# Since the certbot container isn't up constantly, need to resolve ip dynamically using docker's dns
	# 		resolver ___NAMESERVER___;
	# 		set $certbot_addr_port certbot:80;
	# 		proxy_pass http://$certbot_addr_port;
	# 		proxy_set_header Host            $host;
	# 		proxy_set_header X-Forwarded-For $remote_addr;
    #         proxy_set_header X-Forwarded-Proto $scheme;
	# 	}

	# 	location / {
	# 		return         301 https://$server_name$request_uri;
	# 	}

	# }

	# server {
	# 	listen 443;
	# 	server_name ___my.example.com___ www.___my.example.com___;

	# 	ssl on;
	# 	ssl_certificate /etc/letsencrypt/live/___my.example.com___/fullchain.pem;
	# 	ssl_certificate_key /etc/letsencrypt/live/___my.example.com___/privkey.pem;
	# 	ssl_session_timeout 5m;
	# 	ssl_protocols TLSv1 TLSv1.1 TLSv1.2;
	# 	ssl_ciphers 'EECDH+AESGCM:EDH+AESGCM:AES256+EECDH:AES256+EDH';
	# 	ssl_prefer_server_ciphers on;

	# 	ssl_session_cache shared:SSL:10m;
	# 	ssl_dhparam /etc/ssl/private/dhparams.pem;

	# 	location /.well-known/acme-challenge {
	# 		resolver ___NAMESERVER___;
	# 		set $certbot_addr_port certbot:443;
	# 		proxy_pass http://$certbot_addr_port;
	# 		proxy_set_header Host            $host;
	# 		proxy_set_header X-Forwarded-For $remote_addr;
	# 		proxy_set_header X-Forwarded-Proto https;
	# 	}

	# 	location / {
    #         # checks for static file, if not found proxy to app
    #         try_files $uri @proxy_to_app;
    #     }

	# 	# cookiecutter-django app
	# 	location @proxy_to_app {
    #         proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
    #         proxy_set_header Host $http_host;
    #         proxy_redirect off;

    #         proxy_pass   http://app;

    #     }

	# }


}
